import Head from "next/head";
import JishoAPI from "unofficial-jisho-api";
import { JishoAPIResult, JishoResult, KanjiParseResult, JishoWordSense  } from "unofficial-jisho-api";

import {
  Container,
  Main,
  Title,
  Description,
  CodeTag,
  Separator,
  Kana,
  Furigana,
  WordContainer,
  MeaningsContainer,
  Meaning,
  PartOfSpeech,
  InnerContainer
} from "@/components/sharedstyles";

import { kanji_list } from "@/public/kanji"; 

import Cards from "@/components/cards";
import Error from "next/error";

const Home = (props : any) => {
   
  if (!props.sucess) return <p>Bad :c</p>

  // console.log(props.data)
  const word : string  =  props.data.japanese[0].word;
  const furigana : string = props.data.japanese[0].reading;
  const senses : JishoWordSense[] = props.data.senses;

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <WordContainer>
          <Furigana>
            {furigana}
          </Furigana>
          <Kana>
            <Title>
              {word}
            </Title>
          </Kana>
        </WordContainer>
        <Separator/>
        <MeaningsContainer>
        {senses.map( (sense, index) => {
          const parts_of_speech = sense.parts_of_speech;
          const key = sense.english_definitions, meaning = "m", pos = "p";
          const definitions = sense.english_definitions.join("; ")
          return <>
          <InnerContainer key={word + key}>
            <PartOfSpeech key={key + meaning}>{parts_of_speech[0]}</PartOfSpeech>
            <Meaning key={key + pos}>{index}. {definitions}</Meaning>
          </InnerContainer>
          </>
        })}
        </MeaningsContainer>

        {/* <Description>
          Get started by editing
          <CodeTag>pages/index.tsx</CodeTag>
        </Description> */}

        {/* <Cards /> */}
      </Main>
    </Container>
  );
}

const isKanji = (char: string): boolean  => {
  // Regular expression for Japanese Kanji characters
  // (Unicode range: \u4e00-\u9faf)
  const kanjiRegex = /[\u4e00-\u9faf]/;
  return kanjiRegex.test(char);
}

interface WordResult extends JishoResult {
  kanjis : KanjiParseResult[];
}

interface KanjiReading {
  kanji: string;
  reading: string;
}

const RandomKanji = (): string => {
  return kanji_list.getRandomItem();
}


export async function getServerSideProps() {

  const jisho = new JishoAPI();

  try {

    const search_frase : string = "電車";
    const search_kanji : string = RandomKanji();

    const res_kanji : KanjiParseResult = await jisho.searchForKanji(search_kanji);
    const possible_word : string[] = [...res_kanji.kunyomiExamples, ...res_kanji.onyomiExamples].map( example => example.example)
    const word = possible_word.getRandomItem();
    
    const res : JishoAPIResult = await jisho.searchForPhrase(word);
    
    if (res.meta.status != 200) return; 

    // Try to find exact match for word
    
    const results : JishoResult[] = res.data;

    console.log("word :", word);


    let exact_match : JishoResult | undefined;

    exact_match = results.find( result => {
      return result.slug === word;
    })

    if (exact_match == undefined) return { props: { sucess: false } };

    // Create list of Kanjis in word
    const kanjis : string[] = exact_match?.slug
      .split("")
      .filter(character => isKanji(character));

    // Get aditional kanji info
    let kanji_results : KanjiParseResult[] = await Promise.all(kanjis.map( async (kanji) => {
      const kanji_res : KanjiParseResult = await jisho.searchForKanji(kanji);
      return kanji_res;
    }));

    const word_result : WordResult = {
      ...exact_match,
      kanjis: kanji_results,
    }

    // const teste = 

    // console.log(word_result);


    return { props: { data: word_result, sucess: true } }
  } 
  catch (error : any) {
    console.log(error)
    return { props: { sucess: false } }
  }
}

export default Home;
