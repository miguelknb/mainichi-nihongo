import Head from "next/head";
import JishoAPI, { ExampleParseResult, Result } from "unofficial-jisho-api";
import { JishoAPIResult, JishoResult, KanjiParseResult, JishoWordSense  } from "unofficial-jisho-api";

import {
  Container,
  Main,
  Title,
  Description,
  CodeTag,
  Separator,
  Kana,
  Furigana,
  WordContainer,
  MeaningsContainer,
  Meaning,
  PartOfSpeech,
  InnerContainer,
  PhrasesContainer,
  MeaningLine,
  MeaningNumber,
  KanjiContainer,
  Row,
  Column,
  ExampleContainer,
  ColumnTitle
} from "@/components/sharedstyles";



import { kanji_list } from "@/public/kanji"; 

import Cards from "@/components/cards";
import Error from "next/error";
import Kanji from "@/components/kanji";

const Home = (props : any) => {
   
  if (!props.sucess) return <p>Bad :c</p>

  console.log(props.data)
  const word : string  =  props.data.japanese[0].word;
  const furigana : string = props.data.japanese[0].reading;
  const senses : JishoWordSense[] = props.data.senses;
  const kanjis : KanjiParseResult[] = props.data.kanjis;
  const examples : Result[] = props.data.examples.results;


  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Column>
          <KanjiContainer>
            {kanjis.map((kanji) => {
              return <Kanji kanji={kanji} key={kanji.query} />
            })}
          </KanjiContainer>
        </Column>
        <Column>
          <Row>
            <WordContainer>
              <Furigana>
                {furigana}
              </Furigana>
              <Kana>
                <Title>
                  {word}
                </Title>
              </Kana>
            </WordContainer>
          </Row>
          <Separator />
          <MeaningsContainer>
            {senses.map((sense, index) => {
              const parts_of_speech = sense.parts_of_speech;
              const key = parts_of_speech[index], meaning = "m", pos = "p";
              const definitions = sense.english_definitions;

              return <InnerContainer key={word + key}>
                <PartOfSpeech key={key + meaning}>{parts_of_speech[0]}</PartOfSpeech>
                <MeaningLine key={key + pos}>
                  {definitions.map((definition, index) => {
                    const is_first: boolean = (index == 0);

                    return <Meaning key={definition} $first={is_first}>{definition};&nbsp;</Meaning>
                  })}
                </MeaningLine>
              </InnerContainer>
            })}
          </MeaningsContainer>
        </Column>
        <Column>
          <PhrasesContainer>
            {examples.map( ex => {
              return <ExampleContainer>
                  <p>{ex.kana}</p>
                  <p>{ex.english}</p>
              </ExampleContainer>
            })}
          </PhrasesContainer>
        </Column>
      </Main>
    </Container>
  );
}

const isKanji = (char: string): boolean  => {
  // Regular expression for Japanese Kanji characters
  // (Unicode range: \u4e00-\u9faf)
  const kanjiRegex = /[\u4e00-\u9faf]/;
  return kanjiRegex.test(char);
}
interface WordResult extends JishoResult {
  kanjis : KanjiParseResult[];
  examples : ExampleParseResult;
}

const RandomKanji = (): string => {
  return kanji_list.getRandomItem();
}


export async function getServerSideProps() {

  const jisho = new JishoAPI();

  try {

    const search_kanji : string = RandomKanji();
    const res_kanji : KanjiParseResult = await jisho.searchForKanji(search_kanji);
    const possible_word : string[] = [...res_kanji.kunyomiExamples, ...res_kanji.onyomiExamples].map( example => example.example)  
    const word = possible_word.getRandomItem();

    const res : JishoAPIResult = await jisho.searchForPhrase(word);
    
    if (res.meta.status != 200) return; 

    // Try to find exact match for word
    
    const results : JishoResult[] = res.data;

    let exact_match : JishoResult | undefined;

    exact_match = results.find( result => {
      return result.slug === word;
    })

    if (exact_match == undefined) return { props: { sucess: false } };

    // check

    // Create list of Kanjis in word
    const kanjis : string[] = exact_match?.slug
      .split("")
      .filter(character => isKanji(character));

    // Get aditional kanji info
    let kanji_results : KanjiParseResult[] = await Promise.all(kanjis.map( async (kanji) => {
      let kanji_res : KanjiParseResult = await jisho.searchForKanji(kanji);

      if (kanji_res.taughtIn === undefined) kanji_res.taughtIn = "";
      if (kanji_res.jlptLevel === undefined) kanji_res.jlptLevel = "";
      if (kanji_res.newspaperFrequencyRank === undefined) kanji_res.newspaperFrequencyRank = "";
      return kanji_res;
    }));

    // Get examples

    let examples : ExampleParseResult = await jisho.searchForExamples(exact_match.slug);

    const word_result : WordResult = {
      ...exact_match,
      kanjis: kanji_results,
      examples: examples
    }

    return { props: { data: word_result, sucess: true } }
  } 
  catch (error : any) {
    console.log(error)
    return { props: { sucess: false } }
  }
}

export default Home;
